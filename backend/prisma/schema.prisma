generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// CORE ENTITIES
// =============================================

model User {
  id              String    @id @default(cuid())
  username        String    @unique @db.VarChar(50)
  email           String    @unique @db.VarChar(255)
  passwordHash    String    @map("password_hash") @db.VarChar(255)
  firstName       String?   @map("first_name") @db.VarChar(100)
  lastName        String?   @map("last_name") @db.VarChar(100)
  profileImageUrl String?   @map("profile_image_url") @db.VarChar(500)
  bio             String?   @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  lastLoginAt     DateTime? @map("last_login_at")
  isActive        Boolean   @default(true) @map("is_active")
  emailVerified   Boolean   @default(false) @map("email_verified")

  // Relations
  createdTutorials             Tutorial[]
  tutorialProgress             UserTutorialProgress[]
  topicProgress                UserTopicProgress[]
  problemAttempts              UserProblemAttempt[]
  challengeSubmissions         UserChallengeSubmission[]
  contestParticipations        UserContestParticipation[]
  certificates                 UserCertificate[]
  applications                 UserApplication[]
  sessions                     UserSession[]
  auditLogs                    AuditLog[]
  createdProblems              Problem[]
  createdSolutions             Solution[]
  createdChallenges            Challenge[]
  createdContests              Contest[]
  reviewedChallengeSubmissions UserChallengeSubmission[]  @relation("ReviewedBy")

  @@index([username])
  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Company {
  id           String        @id @default(cuid())
  name         String        @db.VarChar(255)
  description  String?       @db.Text
  websiteUrl   String?       @map("website_url") @db.VarChar(500)
  logoUrl      String?       @map("logo_url") @db.VarChar(500)
  industry     String?       @db.VarChar(100)
  sizeCategory SizeCategory? @map("size_category")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  isActive     Boolean       @default(true) @map("is_active")

  // Relations
  hiringProcesses HiringProcess[]

  @@index([name])
  @@index([industry])
  @@map("companies")
}

model Technology {
  id          String              @id @default(cuid())
  name        String              @unique @db.VarChar(100)
  description String?             @db.Text
  category    TechnologyCategory?
  logoUrl     String?             @map("logo_url") @db.VarChar(500)
  createdAt   DateTime            @default(now()) @map("created_at")

  // Relations
  tutorialTechnologies  TutorialTechnology[]
  challengeTechnologies ChallengeTechnology[]
  hiringProcessSkills   HiringProcessSkill[]

  @@index([name])
  @@index([category])
  @@map("technologies")
}

// =============================================
// DOMAIN & CATEGORY MANAGEMENT
// =============================================

model Domain {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(100) // e.g., "Data Structures & Algorithms", "Web Development", "Machine Learning"
  slug        String   @unique @db.VarChar(100) // e.g., "dsa", "web-dev", "ml"
  description String?  @db.Text
  iconUrl     String?  @map("icon_url") @db.VarChar(500)
  color       String?  @db.VarChar(7) // Hex color code
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  categories Category[]
  problems   Problem[]

  @@index([slug])
  @@index([isActive])
  @@map("domains")
}

model Category {
  id          String   @id @default(cuid())
  domainId    String   @map("domain_id")
  name        String   @db.VarChar(100) // e.g., "Arrays", "React Components", "Neural Networks"
  slug        String   @db.VarChar(100)
  description String?  @db.Text
  orderIndex  Int      @map("order_index")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  domain   Domain    @relation(fields: [domainId], references: [id], onDelete: Cascade)
  problems Problem[]

  @@unique([domainId, slug])
  @@unique([domainId, orderIndex])
  @@index([domainId, orderIndex])
  @@map("categories")
}

// =============================================
// PROGRAMMING LANGUAGES & EXECUTION
// =============================================

model ProgrammingLanguage {
  id               String   @id @default(cuid())
  name             String   @unique @db.VarChar(50) // e.g., "Python", "JavaScript", "SQL"
  displayName      String   @map("display_name") @db.VarChar(50) // e.g., "Python 3.9", "Node.js 18"
  fileExtension    String   @map("file_extension") @db.VarChar(10) // e.g., ".py", ".js", ".sql"
  version          String?  @db.VarChar(20)
  executionCommand String?  @map("execution_command") @db.Text // Command to execute the code
  compileCommand   String?  @map("compile_command") @db.Text // For compiled languages
  dockerImage      String?  @map("docker_image") @db.VarChar(255) // Docker image for execution
  memoryLimitMb    Int      @default(256) @map("memory_limit_mb")
  timeLimitSeconds Int      @default(10) @map("time_limit_seconds")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  codeTemplates      CodeTemplate[]
  problemAttempts    UserProblemAttempt[]
  solutions          Solution[]
  examples           Example[]
  contestSubmissions ContestSubmission[]
  executionConfigs   ProblemExecutionConfig[]

  @@index([name])
  @@index([isActive])
  @@map("programming_languages")
}

model CodeTemplate {
  id              String   @id @default(cuid())
  problemId       String   @map("problem_id")
  languageId      String   @map("language_id")
  templateCode    String   @map("template_code") @db.Text // Pre-written function signature
  starterCode     String?  @map("starter_code") @db.Text // Basic implementation hints
  helperCode      String?  @map("helper_code") @db.Text // Utility functions/classes
  imports         String?  @db.Text // Required imports/includes
  mainFunction    String?  @map("main_function") @db.Text // Main execution wrapper
  testRunnerCode  String?  @map("test_runner_code") @db.Text // Code to run test cases
  inputParser     String   @map("input_parser") @db.Text
  outputFormatter String   @map("output_formatter") @db.Text
  functionName    String   @map("function_name")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  problem    Problem             @relation(fields: [problemId], references: [id], onDelete: Cascade)
  language   ProgrammingLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)
  parameters TemplateParameter[]

  @@unique([problemId, languageId])
  @@index([problemId])
  @@index([languageId])
  @@map("code_templates")
}

model TemplateParameter {
  id          String        @id @default(cuid())
  templateId  String        @map("template_id")
  name        String
  type        ParameterType
  description String
  parser      String?       @db.Text
  orderIndex  Int           @map("order_index")
  createdAt   DateTime      @default(now()) @map("created_at")

  // Relation
  template CodeTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, orderIndex])
  @@index([templateId])
  @@map("template_parameters")
}

// =============================================
// LEARNING CONTENT STRUCTURE
// =============================================

model Tutorial {
  id                     String           @id @default(cuid())
  name                   String           @db.VarChar(255)
  description            String?          @db.Text
  difficultyLevel        DifficultyLevel? @map("difficulty_level")
  estimatedDurationHours Int?             @map("estimated_duration_hours")
  thumbnailUrl           String?          @map("thumbnail_url") @db.VarChar(500)
  isPublished            Boolean          @default(false) @map("is_published")
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @default(now()) @updatedAt @map("updated_at")
  createdBy              String?          @map("created_by")

  // Relations
  creator      User?                  @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  technologies TutorialTechnology[]
  topics       Topic[]
  userProgress UserTutorialProgress[]

  @@index([name])
  @@index([difficultyLevel])
  @@index([isPublished])
  @@map("tutorials")
}

model TutorialTechnology {
  tutorialId   String  @map("tutorial_id")
  technologyId String  @map("technology_id")
  isPrimary    Boolean @default(false) @map("is_primary")

  // Relations
  tutorial   Tutorial   @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  technology Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([tutorialId, technologyId])
  @@map("tutorial_technologies")
}

model Topic {
  id                       String   @id @default(cuid())
  tutorialId               String   @map("tutorial_id")
  name                     String   @db.VarChar(255)
  description              String?  @db.Text
  orderIndex               Int      @map("order_index")
  estimatedDurationMinutes Int?     @map("estimated_duration_minutes")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  tutorial     Tutorial            @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  methods      Method[]
  problems     Problem[]
  userProgress UserTopicProgress[]

  @@unique([tutorialId, orderIndex], name: "unique_tutorial_order")
  @@index([tutorialId, orderIndex])
  @@map("topics")
}

model Method {
  id             String   @id @default(cuid())
  topicId        String   @map("topic_id")
  name           String   @db.VarChar(255)
  description    String?  @db.Text
  syntaxPattern  String?  @map("syntax_pattern") @db.VarChar(500)
  complexityNote String?  @map("complexity_note") @db.Text
  orderIndex     Int      @map("order_index")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  topic    Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  examples Example[]

  @@unique([topicId, orderIndex], name: "unique_topic_order")
  @@index([topicId, orderIndex])
  @@map("methods")
}

model Example {
  id          String   @id @default(cuid())
  methodId    String   @map("method_id")
  title       String?  @db.VarChar(255)
  codeSnippet String   @map("code_snippet") @db.Text
  explanation String?  @db.Text
  languageId  String   @map("language_id")
  orderIndex  Int      @map("order_index")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  method   Method              @relation(fields: [methodId], references: [id], onDelete: Cascade)
  language ProgrammingLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([methodId, orderIndex], name: "unique_method_order")
  @@index([methodId, languageId])
  @@map("examples")
}

// =============================================
// ENHANCED PROBLEM SYSTEM
// =============================================

model Problem {
  id               String             @id @default(cuid())
  domainId         String             @map("domain_id")
  categoryId       String?            @map("category_id")
  topicId          String?            @map("topic_id") // Optional for non-tutorial problems
  title            String             @db.VarChar(255)
  slug             String             @unique @db.VarChar(255)
  description      String             @db.Text
  problemType      ProblemType        @default(algorithmic) @map("problem_type")
  difficultyLevel  ProblemDifficulty? @map("difficulty_level")
  timeLimitSeconds Int?               @map("time_limit_seconds")
  memoryLimitMb    Int?               @map("memory_limit_mb")

  // Enhanced problem content
  problemStatement String  @map("problem_statement") @db.Text
  inputFormat      String? @map("input_format") @db.Text
  outputFormat     String? @map("output_format") @db.Text
  constraints      String? @db.Text
  notes            String? @db.Text
  hints            String? @db.Text

  // Metadata
  tags            String[] // Array of tags for better searchability
  companyTags     String[] @map("company_tags") // Companies that asked this problem
  similarProblems String[] @map("similar_problems") // Array of problem IDs

  // Ordering and status
  orderIndex  Int?     @map("order_index")
  isPublished Boolean  @default(false) @map("is_published")
  isPremium   Boolean  @default(false) @map("is_premium")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy   String?  @map("created_by")

  // Relations
  domain             Domain                   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  category           Category?                @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  topic              Topic?                   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  testCases          TestCase[]
  codeTemplates      CodeTemplate[]
  creator            User?                    @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  suggestions        ProblemSuggestion[]
  solutions          Solution[]
  userAttempts       UserProblemAttempt[]
  contestProblems    ContestProblem[]
  contestSubmissions ContestSubmission[]
  executionConfigs   ProblemExecutionConfig[]

  @@index([domainId, categoryId])
  @@index([problemType])
  @@index([difficultyLevel])
  @@index([isPublished, isPremium])
  @@index([topicId, orderIndex])
  @@index([slug])
  @@map("problems")
}

model ProblemExecutionConfig {
  id                  String   @id @default(cuid())
  problemId           String   @map("problem_id")
  languageId          String   @map("language_id")
  timeLimitSeconds    Int?     @map("time_limit_seconds")
  memoryLimitMb       Int?     @map("memory_limit_mb")
  specialInstructions String?  @map("special_instructions") @db.Text
  environmentVars     Json?    @map("environment_vars") // Environment variables for execution
  customJudge         String?  @map("custom_judge") @db.Text // Custom judge code for special problems
  createdAt           DateTime @default(now()) @map("created_at")

  // Relations
  problem  Problem             @relation(fields: [problemId], references: [id], onDelete: Cascade)
  language ProgrammingLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([problemId, languageId])
  @@map("problem_execution_configs")
}

model TestCase {
  id             String   @id @default(cuid())
  problemId      String   @map("problem_id")
  input          String   @db.Text
  expectedOutput String   @map("expected_output") @db.Text
  explanation    String?  @db.Text
  isHidden       Boolean  @default(false) @map("is_hidden")
  isSample       Boolean  @default(false) @map("is_sample")
  weight         Decimal  @default(1.0) @db.Decimal(3, 2) // For weighted scoring
  testGroup      String?  @map("test_group") @db.VarChar(50) // Group similar test cases
  orderIndex     Int      @map("order_index")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([problemId, orderIndex])
  @@index([problemId, isHidden])
  @@index([problemId, isSample])
  @@map("test_cases")
}

model ProblemSuggestion {
  id                  String         @id @default(cuid())
  problemId           String         @map("problem_id")
  suggestionText      String         @map("suggestion_text") @db.Text
  suggestionType      SuggestionType @default(hint) @map("suggestion_type")
  orderIndex          Int            @map("order_index")
  revealAfterAttempts Int            @default(3) @map("reveal_after_attempts")
  createdAt           DateTime       @default(now()) @map("created_at")

  // Relations
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([problemId, orderIndex], name: "unique_problem_order")
  @@index([problemId, suggestionType])
  @@map("problem_suggestions")
}

model Solution {
  id              String   @id @default(cuid())
  problemId       String   @map("problem_id")
  languageId      String   @map("language_id")
  title           String?  @db.VarChar(255)
  code            String   @db.Text
  explanation     String?  @db.Text
  approach        String?  @db.Text // Algorithm approach explanation
  timeComplexity  String?  @map("time_complexity") @db.VarChar(100)
  spaceComplexity String?  @map("space_complexity") @db.VarChar(100)
  isOptimal       Boolean  @default(false) @map("is_optimal")
  isOfficial      Boolean  @default(false) @map("is_official")
  voteScore       Int      @default(0) @map("vote_score")
  createdAt       DateTime @default(now()) @map("created_at")
  createdBy       String?  @map("created_by")

  // Relations
  problem  Problem             @relation(fields: [problemId], references: [id], onDelete: Cascade)
  language ProgrammingLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)
  creator  User?               @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@index([problemId, languageId])
  @@index([problemId, isOfficial])
  @@index([voteScore])
  @@map("solutions")
}

// =============================================
// ENHANCED USER ATTEMPTS & SUBMISSIONS
// =============================================

model UserProblemAttempt {
  id             String            @id @default(cuid())
  userId         String            @map("user_id")
  problemId      String            @map("problem_id")
  languageId     String            @map("language_id")
  codeSubmission String            @map("code_submission") @db.Text
  status         SubmissionStatus?
  attemptNumber  Int               @map("attempt_number")

  // Execution results
  executionTimeMs Int?     @map("execution_time_ms")
  memoryUsedMb    Decimal? @map("memory_used_mb") @db.Decimal(8, 2)
  testCasesPassed Int      @default(0) @map("test_cases_passed")
  totalTestCases  Int      @default(0) @map("total_test_cases")
  score           Decimal? @db.Decimal(5, 2) // Percentage score

  // Detailed results
  testCaseResults Json?   @map("test_case_results") // Detailed test case results
  compileError    String? @map("compile_error") @db.Text
  runtimeError    String? @map("runtime_error") @db.Text

  // AI feedback and hints
  aiFeedback String? @map("ai_feedback") @db.Text
  hintsUsed  Int     @default(0) @map("hints_used")

  submittedAt DateTime @default(now()) @map("submitted_at")

  // Relations
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem  Problem             @relation(fields: [problemId], references: [id], onDelete: Cascade)
  language ProgrammingLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@index([userId, problemId])
  @@index([status])
  @@index([submittedAt])
  @@index([userId, status])
  @@map("user_problem_attempts")
}

// =============================================
// CHALLENGES & CONTESTS (Enhanced)
// =============================================

model Challenge {
  id                     String           @id @default(cuid())
  title                  String           @db.VarChar(255)
  description            String           @db.Text
  challengeType          ChallengeType    @default(coding) @map("challenge_type")
  requirements           String?          @db.Text
  difficultyLevel        DifficultyLevel? @map("difficulty_level")
  estimatedDurationHours Int?             @map("estimated_duration_hours")
  maxAttempts            Int?             @map("max_attempts")
  deadline               DateTime?
  isActive               Boolean          @default(true) @map("is_active")
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @default(now()) @updatedAt @map("updated_at")
  createdBy              String?          @map("created_by")

  // Relations
  creator         User?                     @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  technologies    ChallengeTechnology[]
  userSubmissions UserChallengeSubmission[]

  @@index([challengeType])
  @@index([difficultyLevel, isActive])
  @@index([deadline])
  @@map("challenges")
}

model ChallengeTechnology {
  challengeId  String  @map("challenge_id")
  technologyId String  @map("technology_id")
  isRequired   Boolean @default(true) @map("is_required")

  // Relations
  challenge  Challenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  technology Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([challengeId, technologyId])
  @@map("challenge_technologies")
}

model Contest {
  id                   String       @id @default(cuid())
  title                String       @db.VarChar(255)
  description          String?      @db.Text
  contestType          ContestType? @map("contest_type")
  startTime            DateTime     @map("start_time")
  endTime              DateTime     @map("end_time")
  maxParticipants      Int?         @map("max_participants")
  isPublic             Boolean      @default(true) @map("is_public")
  registrationDeadline DateTime?    @map("registration_deadline")
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @default(now()) @updatedAt @map("updated_at")
  createdBy            String?      @map("created_by")

  // Relations
  creator      User?                      @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  problems     ContestProblem[]
  participants UserContestParticipation[]

  @@index([startTime])
  @@index([contestType])
  @@index([isPublic])
  @@map("contests")
}

model ContestProblem {
  contestId  String @map("contest_id")
  problemId  String @map("problem_id")
  points     Int    @default(100)
  orderIndex Int    @map("order_index")

  // Relations
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@id([contestId, problemId])
  @@unique([contestId, orderIndex], name: "unique_contest_order")
  @@map("contest_problems")
}

// =============================================
// USER PROGRESS & ACHIEVEMENTS
// =============================================

model UserTutorialProgress {
  id                 String         @id @default(cuid())
  userId             String         @map("user_id")
  tutorialId         String         @map("tutorial_id")
  status             ProgressStatus @default(not_started)
  progressPercentage Decimal        @default(0.00) @map("progress_percentage") @db.Decimal(5, 2)
  startedAt          DateTime       @default(now()) @map("started_at")
  completedAt        DateTime?      @map("completed_at")
  lastAccessedAt     DateTime       @default(now()) @updatedAt @map("last_accessed_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutorial Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId], name: "unique_user_tutorial")
  @@index([userId, status])
  @@index([progressPercentage])
  @@index([userId, status, lastAccessedAt])
  @@map("user_tutorial_progress")
}

model UserTopicProgress {
  id               String         @id @default(cuid())
  userId           String         @map("user_id")
  topicId          String         @map("topic_id")
  status           ProgressStatus @default(not_started)
  completedAt      DateTime?      @map("completed_at")
  timeSpentMinutes Int            @default(0) @map("time_spent_minutes")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId], name: "unique_user_topic")
  @@index([userId, status])
  @@map("user_topic_progress")
}

model UserChallengeSubmission {
  id            String                     @id @default(cuid())
  userId        String                     @map("user_id")
  challengeId   String                     @map("challenge_id")
  submissionUrl String?                    @map("submission_url") @db.VarChar(500)
  description   String?                    @db.Text
  status        ChallengeSubmissionStatus?
  score         Decimal?                   @db.Decimal(5, 2)
  feedback      String?                    @db.Text
  submittedAt   DateTime                   @default(now()) @map("submitted_at")
  reviewedAt    DateTime?                  @map("reviewed_at")
  reviewedBy    String?                    @map("reviewed_by")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  reviewer  User?     @relation("ReviewedBy", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@unique([userId, challengeId], name: "unique_user_challenge")
  @@index([status])
  @@index([score(sort: Desc)])
  @@map("user_challenge_submissions")
}

model UserContestParticipation {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  contestId      String    @map("contest_id")
  registeredAt   DateTime  @default(now()) @map("registered_at")
  startedAt      DateTime? @map("started_at")
  finishedAt     DateTime? @map("finished_at")
  totalScore     Int       @default(0) @map("total_score")
  finalRank      Int?      @map("final_rank")
  problemsSolved Int       @default(0) @map("problems_solved")

  // Relations
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest     Contest             @relation(fields: [contestId], references: [id], onDelete: Cascade)
  submissions ContestSubmission[]

  @@unique([userId, contestId], name: "unique_user_contest")
  @@index([contestId, finalRank])
  @@index([userId, totalScore(sort: Desc)])
  @@map("user_contest_participation")
}

model ContestSubmission {
  id              String            @id @default(cuid())
  participationId String            @map("participation_id")
  problemId       String            @map("problem_id")
  languageId      String            @map("language_id")
  codeSubmission  String            @map("code_submission") @db.Text
  status          SubmissionStatus?
  score           Int               @default(0)
  executionTimeMs Int?              @map("execution_time_ms")
  memoryUsedMb    Decimal?          @map("memory_used_mb") @db.Decimal(8, 2)
  submittedAt     DateTime          @default(now()) @map("submitted_at")

  // Relations
  participation UserContestParticipation @relation(fields: [participationId], references: [id], onDelete: Cascade)
  problem       Problem                  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  language      ProgrammingLanguage      @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@index([participationId, problemId])
  @@index([status])
  @@map("contest_submissions")
}

// =============================================
// CERTIFICATES & ACHIEVEMENTS
// =============================================

model CertificateType {
  id               String              @id @default(cuid())
  name             String              @db.VarChar(255)
  description      String?             @db.Text
  certificateType  CertificateTypeEnum @map("certificate_type")
  templateUrl      String?             @map("template_url") @db.VarChar(500)
  requirementsJson Json?               @map("requirements_json")
  isActive         Boolean             @default(true) @map("is_active")
  createdAt        DateTime            @default(now()) @map("created_at")

  // Relations
  userCertificates UserCertificate[]

  @@index([certificateType, isActive])
  @@map("certificate_types")
}

model UserCertificate {
  id                String         @id @default(cuid())
  userId            String         @map("user_id")
  certificateTypeId String         @map("certificate_type_id")
  referenceId       String?        @map("reference_id")
  referenceType     ReferenceType? @map("reference_type")
  certificateUrl    String?        @map("certificate_url") @db.VarChar(500)
  verificationCode  String         @unique @map("verification_code") @db.VarChar(100)
  issuedAt          DateTime       @default(now()) @map("issued_at")
  expiresAt         DateTime?      @map("expires_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateType CertificateType @relation(fields: [certificateTypeId], references: [id], onDelete: Cascade)

  @@index([userId, issuedAt(sort: Desc)])
  @@index([verificationCode])
  @@index([referenceType, referenceId])
  @@index([userId, referenceType, issuedAt(sort: Desc)])
  @@map("user_certificates")
}

// =============================================
// COMPANY INTEGRATION & HIRING
// =============================================

model HiringProcess {
  id                  String    @id @default(cuid())
  companyId           String    @map("company_id")
  title               String    @db.VarChar(255)
  description         String?   @db.Text
  requirements        String?   @db.Text
  jobType             JobType?  @map("job_type")
  location            String?   @db.VarChar(255)
  isRemote            Boolean   @default(false) @map("is_remote")
  salaryRangeMin      Int?      @map("salary_range_min")
  salaryRangeMax      Int?      @map("salary_range_max")
  currency            String    @default("USD") @db.VarChar(3)
  applicationDeadline DateTime? @map("application_deadline")
  isActive            Boolean   @default(true) @map("is_active")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  company      Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  skills       HiringProcessSkill[]
  applications UserApplication[]

  @@index([companyId, isActive])
  @@index([jobType])
  @@index([applicationDeadline])
  @@index([companyId, isActive, applicationDeadline(sort: Desc)])
  @@map("hiring_processes")
}

model HiringProcessSkill {
  hiringProcessId  String            @map("hiring_process_id")
  technologyId     String            @map("technology_id")
  proficiencyLevel ProficiencyLevel? @map("proficiency_level")
  isRequired       Boolean           @default(true) @map("is_required")

  // Relations
  hiringProcess HiringProcess @relation(fields: [hiringProcessId], references: [id], onDelete: Cascade)
  technology    Technology    @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([hiringProcessId, technologyId])
  @@map("hiring_process_skills")
}

model UserApplication {
  id              String             @id @default(cuid())
  userId          String             @map("user_id")
  hiringProcessId String             @map("hiring_process_id")
  status          ApplicationStatus?
  coverLetter     String?            @map("cover_letter") @db.Text
  resumeUrl       String?            @map("resume_url") @db.VarChar(500)
  appliedAt       DateTime           @default(now()) @map("applied_at")
  updatedAt       DateTime           @default(now()) @updatedAt @map("updated_at")

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  hiringProcess HiringProcess @relation(fields: [hiringProcessId], references: [id], onDelete: Cascade)

  @@unique([userId, hiringProcessId], name: "unique_user_application")
  @@index([status])
  @@index([appliedAt(sort: Desc)])
  @@map("user_applications")
}

// =============================================
// SYSTEM TABLES
// =============================================

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token") @db.VarChar(255)
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  isActive     Boolean  @default(true) @map("is_active")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId, isActive])
  @@index([expiresAt])
  @@map("user_sessions")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?  @map("user_id")
  action     String   @db.VarChar(100)
  entityType String?  @map("entity_type") @db.VarChar(50)
  entityId   String?  @map("entity_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, action])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// =============================================
// ENUMS
// =============================================

enum SizeCategory {
  startup
  small
  medium
  large
  enterprise
}

enum ParameterType {
  int
  float
  string
  list_int
  list_float
  list_string
  matrix_int
  custom
}

enum TechnologyCategory {
  language
  framework
  library
  tool
  database
  cloud_service
  other
}

enum DifficultyLevel {
  beginner
  intermediate
  advanced
}

enum ProblemDifficulty {
  easy
  medium
  hard
  expert
}

enum ProblemType {
  algorithmic // Traditional DSA problems
  system_design // System design problems
  web_development // Frontend/Backend challenges
  database // SQL problems
  machine_learning // AI/ML problems
  data_analysis // Data science problems
  cybersecurity // Security challenges
  mobile_development // Mobile app challenges
  devops // Infrastructure/deployment problems
  game_development // Game dev challenges
  blockchain // Web3/blockchain problems
  other
}

enum ChallengeType {
  coding // Traditional coding challenge
  project_based // Build a complete project
  design // UI/UX design challenge
  system_design // Architecture challenge
  debugging // Debug existing code
  optimization // Performance optimization
  code_review // Review and improve code
}

enum SuggestionType {
  hint // Problem-solving hint
  approach // Algorithm approach suggestion
  optimization // Performance improvement tip
  debugging // Debug assistance
  concept // Concept explanation
}

enum ContestType {
  interview_style
  open_book
  speed_coding
  algorithm_contest
  hackathon
}

enum ProgressStatus {
  not_started
  in_progress
  completed
}

enum SubmissionStatus {
  pending
  accepted
  wrong_answer
  time_limit_exceeded
  memory_limit_exceeded
  runtime_error
  compile_error
  presentation_error
  output_limit_exceeded
  internal_error
}

enum ChallengeSubmissionStatus {
  submitted
  under_review
  approved
  rejected
  needs_revision
}

enum CertificateTypeEnum {
  tutorial_completion
  challenge_completion
  contest_achievement
  skill_milestone
  domain_mastery
}

enum ReferenceType {
  tutorial
  challenge
  contest
  skill
  domain
  category
}

enum JobType {
  internship
  entry_level
  mid_level
  senior_level
  lead
  principal
}

enum ProficiencyLevel {
  basic
  intermediate
  advanced
  expert
}

enum ApplicationStatus {
  applied
  under_review
  interview_scheduled
  accepted
  rejected
  withdrawn
}
